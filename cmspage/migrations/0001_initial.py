# Generated by Django 5.0.7 on 2024-07-30 16:26

import cmspage.blocks
import cmspage.mixins
import cmspage.models
import django.db.models.deletion
import modelcluster.contrib.taggit
import modelcluster.fields
import wagtail.blocks
import wagtail.documents.blocks
import wagtail.embeds.blocks
import wagtail.fields
import wagtail.images.blocks
from django.db import migrations, models


class Migration(migrations.Migration):

    initial = True

    dependencies = [
        ("taggit", "0006_rename_taggeditem_content_type_object_id_taggit_tagg_content_8fc721_idx"),
        ("wagtailcore", "0093_uploadedfile"),
        ("wagtaildocs", "0013_delete_uploadeddocument"),
        ("wagtailimages", "0026_delete_uploadedimage"),
    ]

    operations = [
        migrations.CreateModel(
            name="CMSPage",
            fields=[
                ("page_ptr", models.OneToOneField(auto_created=True, on_delete=django.db.models.deletion.CASCADE, parent_link=True, primary_key=True, serialize=False, to="wagtailcore.page")),
                ("display_title", models.BooleanField(default=True, help_text="Display the page title on the page")),
                ("display_tags", models.BooleanField(default=False, help_text="Display the page tags on the page")),
                ("seo_keywords", models.CharField(blank=True, help_text="SEO Keywords", max_length=255)),
                ("body", wagtail.fields.StreamField([("hero", cmspage.blocks.HeroImageBlock(label="Hero Image", max_num=1)), ("title", wagtail.blocks.StructBlock([("text", wagtail.blocks.CharBlock(help_text="Title text to display", required=True))], label="Title", max_num=1)), ("cards", wagtail.blocks.StructBlock([("cards", wagtail.blocks.ListBlock(wagtail.blocks.StructBlock([("title", wagtail.blocks.CharBlock(blank=True, help_text="Bold title text for this card (len=255)", max_length=255, null=True, required=False)), ("text", wagtail.blocks.RichTextBlock(blank=True, help_text="Optional text for this card", null=True, required=False)), ("image", wagtail.images.blocks.ImageChooserBlock(help_text="Image - auto-cropped 570x370px", required=False)), ("link", wagtail.blocks.StructBlock([("page_link", wagtail.blocks.PageChooserBlock(label="Page link", required=False)), ("doc_link", wagtail.documents.blocks.DocumentChooserBlock(label="Document link", required=False)), ("extra_link", wagtail.blocks.CharBlock(label="Extra link", max_length=255, required=False)), ("button_title", wagtail.blocks.CharBlock(label="Title", max_length=255, required=False))], help_text="Enter a link or select a page/document", required=False))])))])), ("image_and_text", wagtail.blocks.StructBlock([("image", wagtail.images.blocks.ImageChooserBlock(blank=True, null=True)), ("image_alignment", wagtail.blocks.ChoiceBlock(choices=[("full", "Full width centered"), ("left", "Image to the left"), ("right", "Image to the right")], help_text="Full image - text below, Image left - text right, or image right - text left.")), ("image_size", wagtail.blocks.ChoiceBlock(choices=[("standard", "Standard 786x552"), ("landscape", "Landscape 786x1104"), ("portrait", "Portrait 786x300")], help_text="Layout - match with picture dimensions")), ("title", wagtail.blocks.CharBlock(blank=True, help_text="Max length of 60 characters.", max_length=60, null=True, required=False)), ("text", wagtail.blocks.RichTextBlock(blank=True, features=["h2", "h3", "h4", "bold", "italic", "ol", "ul", "hr", "document-link", "image", "embed", "code", "blockquote", "superscript", "subscript", "strikethrough"], help_text="Description for this item", required=False)), ("link", wagtail.blocks.StructBlock([("page_link", wagtail.blocks.PageChooserBlock(label="Page link", required=False)), ("doc_link", wagtail.documents.blocks.DocumentChooserBlock(label="Document link", required=False)), ("extra_link", wagtail.blocks.CharBlock(label="Extra link", max_length=255, required=False)), ("button_title", wagtail.blocks.CharBlock(label="Title", max_length=255, required=False))], blank=True, null=True, required=False))])), ("cta", wagtail.blocks.StructBlock([("title", wagtail.blocks.CharBlock(blank=True, help_text="Max length of 60 characters, optional", max_length=60, null=True, required=False)), ("text", wagtail.blocks.RichTextBlock(blank=True, features=["h2", "h3", "h4", "bold", "italic", "ol", "ul", "hr", "document-link", "image", "embed", "code", "blockquote", "superscript", "subscript", "strikethrough"], help_text="Call to action text, optional (max=200)", required=False)), ("link", wagtail.blocks.StructBlock([("page_link", wagtail.blocks.PageChooserBlock(label="Page link", required=False)), ("doc_link", wagtail.documents.blocks.DocumentChooserBlock(label="Document link", required=False)), ("extra_link", wagtail.blocks.CharBlock(label="Extra link", max_length=255, required=False)), ("button_title", wagtail.blocks.CharBlock(label="Title", max_length=255, required=False))], blank=True, null=True, required=False))])), ("richtext", wagtail.blocks.StructBlock([("title", wagtail.blocks.CharBlock(blank=True, help_text="Display title, optional (max len=120)", max_length=120, null=True, required=False)), ("content", wagtail.blocks.RichTextBlock(features=["h2", "h3", "h4", "bold", "italic", "ol", "ul", "hr", "document-link", "image", "embed", "code", "blockquote", "superscript", "subscript", "strikethrough"], help_text="Rich text block, required"))])), ("video", wagtail.blocks.StructBlock([("title", wagtail.blocks.CharBlock(blank=True, help_text="Max length of 60 characters, optional", max_length=60, null=True, required=False)), ("video", wagtail.embeds.blocks.EmbedBlock()), ("text", wagtail.blocks.RichTextBlock(blank=True, features=["h2", "h3", "h4", "bold", "italic", "ol", "ul", "hr", "document-link", "image", "embed", "code", "blockquote", "superscript", "subscript", "strikethrough"], help_text="Call to action text, optional (max=200)", required=False))])), ("large_image", cmspage.blocks.LargeImageBlock()), ("table", cmspage.blocks.CustomTableBlock()), ("carousel", wagtail.blocks.StructBlock([])), ("new_section", cmspage.blocks.NewSectionBlock())], blank=True, null=True)),
            ],
            options={
                "verbose_name": "CMS Page",
                "verbose_name_plural": "CMS Pages",
            },
            bases=("wagtailcore.page", cmspage.mixins.CMSTemplateMixin),
        ),
        migrations.CreateModel(
            name="Event",
            fields=[
                ("id", models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name="ID")),
                ("event_date", models.DateField(db_index=True, verbose_name="Date of Event")),
                ("event_time", models.TimeField(verbose_name="Time of Event")),
                ("event_hours", models.PositiveIntegerField(default=1, verbose_name="Event Duration (hours)")),
                ("event_title", models.CharField(max_length=120)),
                ("event_venue", models.TextField(max_length=120)),
                ("event_description", wagtail.fields.RichTextField()),
                ("event_canceled", models.BooleanField(default=False)),
            ],
            options={
                "ordering": ["event_date", "event_time"],
            },
        ),
        migrations.CreateModel(
            name="Tag",
            fields=[
            ],
            options={
                "proxy": True,
                "indexes": [],
                "constraints": [],
            },
            bases=("taggit.tag",),
        ),
        migrations.CreateModel(
            name="CMSHomePage",
            fields=[
                ("cmspage_ptr", models.OneToOneField(auto_created=True, on_delete=django.db.models.deletion.CASCADE, parent_link=True, primary_key=True, serialize=False, to="cmspage.cmspage")),
            ],
            options={
                "verbose_name": "CMS Home Page",
                "verbose_name_plural": "CMS Home Pages",
            },
            bases=("cmspage.cmspage",),
        ),
        migrations.CreateModel(
            name="CarouselImage",
            fields=[
                ("id", models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name="ID")),
                ("sort_order", models.IntegerField(blank=True, editable=False, null=True)),
                ("carousel_title", models.CharField(blank=True, help_text="Display title, optional (max len=120)", max_length=120, null=True)),
                ("carousel_content", wagtail.fields.RichTextField(blank=True, null=True)),
                ("carousel_attribution", models.CharField(blank=True, help_text="Display title, optional (max len=120)", max_length=120, null=True)),
                ("carousel_interval", models.IntegerField(default=12000, help_text="Keep visible for time in milliseconds")),
                ("carousel_image", models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.SET_NULL, related_name="+", to="wagtailimages.image")),
                ("parent_pg", modelcluster.fields.ParentalKey(on_delete=django.db.models.deletion.CASCADE, related_name="carousel_images", to="cmspage.cmspage")),
            ],
            options={
                "ordering": ["sort_order"],
                "abstract": False,
            },
        ),
        migrations.CreateModel(
            name="MenuLink",
            fields=[
                ("id", models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name="ID")),
                ("menu_order", models.IntegerField(default=0, verbose_name="Order")),
                ("menu_title", models.CharField(default="Placeholder", max_length=32, validators=[cmspage.models.min_length_validator], verbose_name="Menu Title")),
                ("link_url", models.URLField(blank=True, help_text="Set a custom URL if not linking to a page or document", verbose_name="External Link")),
                ("link_document", models.ForeignKey(blank=True, help_text="Select a document to link (leave blank for internal page or custom URL)", null=True, on_delete=django.db.models.deletion.SET_NULL, related_name="+", to="wagtaildocs.document", verbose_name="Select Document")),
                ("link_page", models.ForeignKey(blank=True, help_text="Select an internal page to link (leave blank for custom URL or document)", null=True, on_delete=django.db.models.deletion.SET_NULL, related_name="+", to="wagtailcore.page", verbose_name="Select Page")),
                ("site", models.ForeignKey(default=1, help_text="Select the site to which the menu link applies", on_delete=django.db.models.deletion.CASCADE, related_name="+", to="wagtailcore.site")),
            ],
            options={
                "verbose_name": "Menu Link",
                "ordering": ["menu_order", "id"],
            },
        ),
        migrations.CreateModel(
            name="PageTag",
            fields=[
                ("id", models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name="ID")),
                ("content_object", modelcluster.fields.ParentalKey(on_delete=django.db.models.deletion.CASCADE, related_name="cmspage_tags", to="cmspage.cmspage")),
                ("tag", models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name="%(app_label)s_%(class)s_items", to="taggit.tag")),
            ],
            options={
                "abstract": False,
            },
        ),
        migrations.AddField(
            model_name="cmspage",
            name="tags",
            field=modelcluster.contrib.taggit.ClusterTaggableManager(blank=True, help_text="Tags used to search for this page (optional)", through="cmspage.PageTag", to="taggit.Tag", verbose_name="Tags"),
        ),
        migrations.CreateModel(
            name="SiteVariables",
            fields=[
                ("id", models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name="ID")),
                ("vars", models.JSONField(blank=True, default=dict, null=True)),
                ("site", models.OneToOneField(on_delete=django.db.models.deletion.CASCADE, related_name="variables", to="wagtailcore.site")),
            ],
            options={
                "verbose_name": "Site Variables",
            },
        ),
    ]
