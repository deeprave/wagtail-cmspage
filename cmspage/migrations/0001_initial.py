# Generated by Django 4.2.1 on 2023-05-17 13:50

import cmspage.blocks
from django.db import migrations, models
import django.db.models.deletion
import modelcluster.contrib.taggit
import modelcluster.fields
import wagtail.blocks
import wagtail.embeds.blocks
import wagtail.fields
import wagtail.images.blocks


class Migration(migrations.Migration):

    initial = True

    dependencies = [
        ('wagtailimages', '0025_alter_image_file_alter_rendition_file'),
        ('wagtailcore', '0083_workflowcontenttype'),
        ('taggit', '0005_auto_20220424_2025'),
    ]

    operations = [
        migrations.CreateModel(
            name='CMSPage',
            fields=[
                ('page_ptr', models.OneToOneField(auto_created=True, on_delete=django.db.models.deletion.CASCADE, parent_link=True, primary_key=True, serialize=False, to='wagtailcore.page')),
                ('display_title', models.BooleanField(default=True)),
                ('body', wagtail.fields.StreamField([('title', wagtail.blocks.StructBlock([('text', wagtail.blocks.CharBlock(help_text='Title text to display', required=True))])), ('cards', wagtail.blocks.StructBlock([('cards', wagtail.blocks.ListBlock(wagtail.blocks.StructBlock([('title', wagtail.blocks.CharBlock(blank=True, help_text='Bold title text for this card (len=255)', max_length=255, null=True, required=False)), ('text', wagtail.blocks.RichTextBlock(blank=True, help_text='Optional text for this card', null=True, required=False)), ('image', wagtail.images.blocks.ImageChooserBlock(help_text='Image - auto-cropped 570x370px', required=False)), ('link', wagtail.blocks.StructBlock([('link_text', wagtail.blocks.CharBlock(blank=True, default='More details', max_length=50, required=False)), ('internal_page', wagtail.blocks.PageChooserBlock(required=False)), ('external_link', wagtail.blocks.URLBlock(required=False))], help_text='Enter a link or select a page'))])))])), ('image_and_text', wagtail.blocks.StructBlock([('image', wagtail.images.blocks.ImageChooserBlock(blank=True, null=True)), ('image_alignment', wagtail.blocks.ChoiceBlock(choices=[('full', 'Full width centered'), ('left', 'Image to the left'), ('right', 'Image to the right')], help_text='Full image - text below, Image left - text right, or image right - text left.')), ('image_size', wagtail.blocks.ChoiceBlock(choices=[('standard', 'Standard 786x552'), ('landscape', 'Landscape 786x1104'), ('portrait', 'Portrait 786x300')], help_text='Layout - match with picture dimensions')), ('title', wagtail.blocks.CharBlock(blank=True, help_text='Max length of 60 characters.', max_length=60, null=True, required=False)), ('text', wagtail.blocks.RichTextBlock(blank=True, features=['h2', 'h3', 'h4', 'bold', 'italic', 'ol', 'ul', 'hr', 'document-link', 'image', 'embed', 'code', 'blockquote', 'superscript', 'subscript', 'strikethrough'], help_text='Description for this item', required=False)), ('link', wagtail.blocks.StructBlock([('link_text', wagtail.blocks.CharBlock(blank=True, default='More details', max_length=50, required=False)), ('internal_page', wagtail.blocks.PageChooserBlock(required=False)), ('external_link', wagtail.blocks.URLBlock(required=False))], blank=True, null=True))])), ('cta', wagtail.blocks.StructBlock([('title', wagtail.blocks.CharBlock(blank=True, help_text='Max length of 60 characters, optional', max_length=60, null=True, required=False)), ('text', wagtail.blocks.RichTextBlock(blank=True, features=['h2', 'h3', 'h4', 'bold', 'italic', 'ol', 'ul', 'hr', 'document-link', 'image', 'embed', 'code', 'blockquote', 'superscript', 'subscript', 'strikethrough'], help_text='Call to action text, optional (max=200)', required=False)), ('link', wagtail.blocks.StructBlock([('link_text', wagtail.blocks.CharBlock(blank=True, default='More details', max_length=50, required=False)), ('internal_page', wagtail.blocks.PageChooserBlock(required=False)), ('external_link', wagtail.blocks.URLBlock(required=False))], blank=True, null=True))])), ('new_section', wagtail.blocks.StructBlock([])), ('richtext', wagtail.blocks.StructBlock([('title', wagtail.blocks.CharBlock(blank=True, help_text='Display title, optional (max len=120)', max_length=120, null=True, required=False)), ('content', wagtail.blocks.RichTextBlock(features=['h2', 'h3', 'h4', 'bold', 'italic', 'ol', 'ul', 'hr', 'document-link', 'image', 'embed', 'code', 'blockquote', 'superscript', 'subscript', 'strikethrough'], help_text='Rich text block, required'))])), ('video', wagtail.blocks.StructBlock([('title', wagtail.blocks.CharBlock(blank=True, help_text='Max length of 60 characters, optional', max_length=60, null=True, required=False)), ('video', wagtail.embeds.blocks.EmbedBlock()), ('text', wagtail.blocks.RichTextBlock(blank=True, features=['h2', 'h3', 'h4', 'bold', 'italic', 'ol', 'ul', 'hr', 'document-link', 'image', 'embed', 'code', 'blockquote', 'superscript', 'subscript', 'strikethrough'], help_text='Call to action text, optional (max=200)', required=False))])), ('large_image', cmspage.blocks.LargeImageChooserBlock()), ('table', cmspage.blocks.CustomTableBlock())], blank=True, null=True, use_json_field=True)),
            ],
            options={
                'verbose_name': 'CMS Page',
                'verbose_name_plural': 'CMS Pages',
            },
            bases=('wagtailcore.page',),
        ),
        migrations.CreateModel(
            name='Tag',
            fields=[
            ],
            options={
                'proxy': True,
                'indexes': [],
                'constraints': [],
            },
            bases=('taggit.tag',),
        ),
        migrations.CreateModel(
            name='CMSHomePage',
            fields=[
                ('cmspage_ptr', models.OneToOneField(auto_created=True, on_delete=django.db.models.deletion.CASCADE, parent_link=True, primary_key=True, serialize=False, to='cmspage.cmspage')),
            ],
            options={
                'abstract': False,
            },
            bases=('cmspage.cmspage',),
        ),
        migrations.CreateModel(
            name='PageTag',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('content_object', modelcluster.fields.ParentalKey(on_delete=django.db.models.deletion.CASCADE, related_name='page_tags', to='cmspage.cmspage')),
                ('tag', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='%(app_label)s_%(class)s_items', to='taggit.tag')),
            ],
            options={
                'abstract': False,
            },
        ),
        migrations.AddField(
            model_name='cmspage',
            name='tags',
            field=modelcluster.contrib.taggit.ClusterTaggableManager(blank=True, help_text='Tags used to search for this page (optional)', through='cmspage.PageTag', to='taggit.Tag', verbose_name='Tags'),
        ),
        migrations.CreateModel(
            name='CarouselImage',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('sort_order', models.IntegerField(blank=True, editable=False, null=True)),
                ('carousel_title', models.CharField(blank=True, help_text='Display title, optional (max len=120)', max_length=120, null=True)),
                ('carousel_content', wagtail.fields.RichTextField(blank=True, null=True)),
                ('carousel_attribution', models.CharField(blank=True, help_text='Display title, optional (max len=120)', max_length=120, null=True)),
                ('carousel_interval', models.IntegerField(default=12000, help_text='Keep visible for time in milliseconds')),
                ('carousel_image', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='+', to='wagtailimages.image')),
                ('parent_pg', modelcluster.fields.ParentalKey(on_delete=django.db.models.deletion.CASCADE, related_name='carousel_images', to='cmspage.cmspage')),
            ],
            options={
                'ordering': ['sort_order'],
                'abstract': False,
            },
        ),
    ]
